<?php

/**
 * @file
 * Main functions and hook implementations of the Calculator module.
 */

/**
 * Implements hook_menu().
 */
function calculator_menu() {
  $items = array();
  $items['calculator'] = array(
    'title' => 'Calculator',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('calculator_form'),
    'access arguments' => array('access content'),
    'description' => 'Perform basic calculations.',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Form constructor for the Calculator form.
 *
 * @see calculator_form_validate()
 * @see calculator_form_add_submit()
 * @see calculator_form_division_submit()
 * @see calculator_form_multiplication_submit()
 * @see calculator_form_subtraction_submit()
 *
 * @ingroup forms
 */
function calculator_form($form, &$form_state) {
  $form = array();
  $form['#tree'] = TRUE;

  // Value fields.
  $fields = array(
    '1' => t('Value 1'),
    '2' => t('Value 2'),
  );

  foreach ($fields as $machine_name => $title) {
    $form['values'][$machine_name] = array(
      '#type' => 'textfield',
      '#title' => $title,
      '#description' => t('Please enter your number.'),
      '#required' => TRUE,
      '#size' => 10,
      '#maxlength' => 10,
    );
  }

  // Submit buttons.
  $buttons = array(
    'addition' => t('Sum'),
    'multiplication' => t('Product'),
    'subtraction' => t('Subtraction'),
    'division' => t('Division'),
  );

  foreach ($buttons as $machine_name => $label) {
    $form['submit'][$machine_name] = array(
      '#type' => 'submit',
      '#value' => $label,
      '#submit' => array("calculator_form_${machine_name}_submit"),
      '#validate' => array('calculator_form_validate'),
    );
  }

  return $form;
}

/**
 * Form submission handler for calculator_form().
 *
 * Fires when the 'addition' submit button is pressed.
 */
function calculator_form_addition_submit($form, &$form_state) {
  $result = array_sum(calculator_form_get_values($form_state));

  // calculator_output_result($result);
}

/**
 * Form submission handler for calculator_form().
 *
 * Fires when the 'multiplication' submit button is pressed.
 */
function calculator_form_multiplication_submit($form, &$form_state) {
  $result = array_product(calculator_form_get_values($form_state));

  // calculator_output_result($result);
}

/**
 * Form submission handler for calculator_form().
 *
 * Fires when the 'division' submit button is pressed.
 */
function calculator_form_division_submit($form, &$form_state) {
  $values = calculator_form_get_values($form_state);
  $first_value = array_shift($values);

  $result = array_reduce($values, function ($carry, $item) {
    return $carry / $item;
  }, $first_value);

  // calculator_output_result($result);
}

/**
 * Form submission handler for calculator_form().
 *
 * Fires when the 'subtraction' submit button is pressed.
 */
function calculator_form_subtraction_submit($form, &$form_state) {
  $values = calculator_form_get_values($form_state);
  $first_value = array_shift($values);

  $result = array_reduce($values, function ($carry, $item) {
    return $carry - $item;
  }, $first_value);

  // calculator_output_result( $result );
}

/**
 * Form validation handler for calculator_form().
 */
function calculator_form_validate($form, &$form_state) {
  $values = calculator_form_get_values($form_state);

  // Check that the values are numeric.
  foreach ($values as $key => $value) {
    if (!empty($value) && !is_numeric($value)) {
      // form_set_error('values]['.$key, 'Only enter numeric values.');
    }
  }

  // Check that we are not dividing by zero.
  if (in_array('calculator_form_division_submit', $form_state['triggering_element']['#submit'])) {
    // Only the first value can be zero, all other can't. Remove the first
    // value and check the others.
    array_shift($values);
    foreach ($values as $key => $value) {
      if (!$value) {
        // form_set_error('values]['.$key, 'Division by zero is not allowed.');
      }
    }
  }
}

/**
 * Returns the values that were submitted in the calculator form.
 *
 * @param array $form_state
 *   The form state that contains the values.
 *
 * @return array
 *   The submitted values, keyed by field machine name.
 */
function calculator_form_get_values(array $form_state) {
  return $form_state['values']['values'];
}

/**
 * Prints out the result of the calculation.
 *
 * @param int|float $result
 *   The result of the calculation that should be printed out.
 */
function calculator_output_result($result) {
  // $result = round($result,2);
  drupal_set_message(t('The result is @result', array('@result' => $result)));
}
